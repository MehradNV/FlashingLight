;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project : Pele2
;Version :
;Date    : 1/12/2021
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;int states[4] = {9 , 10 , 6 , 5};

	.DSEG
;int currentState=0;
;int i;
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021 
; 0000 0022 
; 0000 0023           TCNT0=6;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0024 
; 0000 0025     PORTA = states[currentState];
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0026 
; 0000 0027     if(i>0) {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0028         if(currentState<3) {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0029             ++currentState;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 002A         } else {
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 002B             currentState=0;
;PCODE: $00000021 VOL: 0
; 0000 002C         }
;PCODE: $00000022 VOL: 0
; 0000 002D     } else {
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 002E         if(currentState>0) {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002F             --currentState;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0030         } else {
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0031             currentState=3;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0032         }
;PCODE: $0000002E VOL: 0
; 0000 0033     }
;PCODE: $0000002F VOL: 0
; 0000 0034 
; 0000 0035 
; 0000 0036 }
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;void main(void)
; 0000 0039 {
;PCODE: $00000033 VOL: 0
; 0000 003A 
; 0000 003B 
; 0000 003C     currentState = 0;
;PCODE: $00000034 VOL: 0
; 0000 003D     i = 1;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 003E 
; 0000 003F DDRA=0xff;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0040 PORTA=0x00;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0041 
; 0000 0042 DDRC=0x00;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0043 PORTC=0x00;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0044 
; 0000 0045 
; 0000 0046 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0047 TCNT0=0x00;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0000 0048 OCR0=0x00;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0049 
; 0000 004A TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 004B 
; 0000 004C 
; 0000 004D #asm("sei")
;PCODE: $00000047 VOL: 0
	sei
;PCODE: $00000048 VOL: 0
; 0000 004E 
; 0000 004F while (1)
;PCODE: $00000049 VOL: 0
; 0000 0050       {
; 0000 0051           if(PINC.2==0) {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0052             i =1;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0053 
; 0000 0054         }else{
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0055             i =-1;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0056         }
;PCODE: $00000053 VOL: 0
; 0000 0057 
; 0000 0058       }
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0059 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
